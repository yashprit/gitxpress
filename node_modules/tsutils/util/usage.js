"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var node_1 = require("../typeguard/node");
var util_1 = require("./util");
var ts = require("typescript");
var DeclarationDomain;
(function (DeclarationDomain) {
    DeclarationDomain[DeclarationDomain["Namespace"] = 1] = "Namespace";
    DeclarationDomain[DeclarationDomain["Type"] = 2] = "Type";
    DeclarationDomain[DeclarationDomain["Value"] = 4] = "Value";
    DeclarationDomain[DeclarationDomain["Any"] = 7] = "Any";
})(DeclarationDomain = exports.DeclarationDomain || (exports.DeclarationDomain = {}));
var UsageDomain;
(function (UsageDomain) {
    UsageDomain[UsageDomain["Namespace"] = 1] = "Namespace";
    UsageDomain[UsageDomain["Type"] = 2] = "Type";
    UsageDomain[UsageDomain["Value"] = 4] = "Value";
    UsageDomain[UsageDomain["ValueOrNamespace"] = 5] = "ValueOrNamespace";
    UsageDomain[UsageDomain["Any"] = 7] = "Any";
    UsageDomain[UsageDomain["TypeQuery"] = 8] = "TypeQuery";
})(UsageDomain = exports.UsageDomain || (exports.UsageDomain = {}));
function getUsageDomain(node) {
    var parent = node.parent;
    switch (parent.kind) {
        case ts.SyntaxKind.TypeReference:
        case ts.SyntaxKind.TypeOperator:
            return 2;
        case ts.SyntaxKind.ExpressionWithTypeArguments:
            return parent.parent.token === ts.SyntaxKind.ImplementsKeyword ||
                parent.parent.parent.kind === ts.SyntaxKind.InterfaceDeclaration
                ? 2
                : 4;
        case ts.SyntaxKind.TypeQuery:
            return 5 | 8;
        case ts.SyntaxKind.QualifiedName:
            if (parent.left === node) {
                if (getEntityNameParent(parent).kind === ts.SyntaxKind.TypeQuery)
                    return 1 | 8;
                return 1;
            }
            break;
        case ts.SyntaxKind.NamespaceExportDeclaration:
            return 1;
        case ts.SyntaxKind.ExportSpecifier:
            if (parent.propertyName === undefined ||
                parent.propertyName === node)
                return 7;
            break;
        case ts.SyntaxKind.ExportAssignment:
            return 7;
        case ts.SyntaxKind.BindingElement:
            if (parent.initializer === node)
                return 5;
            break;
        case ts.SyntaxKind.EnumMember:
        case ts.SyntaxKind.PropertyDeclaration:
        case ts.SyntaxKind.Parameter:
        case ts.SyntaxKind.VariableDeclaration:
        case ts.SyntaxKind.PropertyAssignment:
        case ts.SyntaxKind.PropertyAccessExpression:
        case ts.SyntaxKind.ImportEqualsDeclaration:
            if (parent.name !== node)
                return 5;
            break;
        case ts.SyntaxKind.JsxAttribute:
        case ts.SyntaxKind.FunctionDeclaration:
        case ts.SyntaxKind.FunctionExpression:
        case ts.SyntaxKind.NamespaceImport:
        case ts.SyntaxKind.ClassDeclaration:
        case ts.SyntaxKind.ClassExpression:
        case ts.SyntaxKind.ModuleDeclaration:
        case ts.SyntaxKind.MethodDeclaration:
        case ts.SyntaxKind.EnumDeclaration:
        case ts.SyntaxKind.GetAccessor:
        case ts.SyntaxKind.SetAccessor:
        case ts.SyntaxKind.LabeledStatement:
        case ts.SyntaxKind.ImportClause:
        case ts.SyntaxKind.ImportSpecifier:
        case ts.SyntaxKind.TypePredicate:
        case ts.SyntaxKind.MethodSignature:
        case ts.SyntaxKind.PropertySignature:
        case ts.SyntaxKind.NamespaceExportDeclaration:
        case ts.SyntaxKind.QualifiedName:
        case ts.SyntaxKind.TypeReference:
        case ts.SyntaxKind.TypeOperator:
        case ts.SyntaxKind.InterfaceDeclaration:
        case ts.SyntaxKind.TypeAliasDeclaration:
        case ts.SyntaxKind.TypeParameter:
            break;
        default:
            return 5;
    }
}
exports.getUsageDomain = getUsageDomain;
function collectVariableUsage(sourceFile) {
    return new UsageWalker().getUsage(sourceFile);
}
exports.collectVariableUsage = collectVariableUsage;
var AbstractScope = (function () {
    function AbstractScope(_global) {
        this._global = _global;
        this._variables = new Map();
        this._uses = [];
        this._namespaceScopes = undefined;
        this._enumScopes = undefined;
    }
    AbstractScope.prototype.addVariable = function (identifier, name, blockScoped, exported, domain) {
        var variables = this._getDestinationScope(blockScoped).getVariables();
        var variable = variables.get(identifier);
        if (variable === undefined) {
            variable = {
                domain: domain,
                exported: exported,
                declarations: [name],
                uses: [],
                inGlobalScope: this._global,
            };
            variables.set(identifier, variable);
        }
        else {
            variable.domain |= domain;
            variable.declarations.push(name);
        }
    };
    AbstractScope.prototype.addUse = function (use) {
        this._uses.push(use);
    };
    AbstractScope.prototype.getVariables = function () {
        return this._variables;
    };
    AbstractScope.prototype.getFunctionScope = function () {
        return this;
    };
    AbstractScope.prototype.end = function (cb) {
        for (var _i = 0, _a = this._uses; _i < _a.length; _i++) {
            var use = _a[_i];
            var variable = this._variables.get(use.location.text);
            if (variable !== undefined && variable.domain & use.domain) {
                variable.uses.push(use);
            }
            else {
                this._addUseToParent(use);
            }
        }
        return this._variables.forEach(cb);
    };
    AbstractScope.prototype.settle = function () {
        throw new Error('not supported');
    };
    AbstractScope.prototype.markExported = function (_name) { };
    AbstractScope.prototype.createOrReuseNamespaceScope = function (name, _exported) {
        var scope;
        if (this._namespaceScopes === undefined) {
            this._namespaceScopes = new Map();
        }
        else {
            scope = this._namespaceScopes.get(name);
        }
        if (scope === undefined) {
            scope = new NamespaceScope(this);
            this._namespaceScopes.set(name, scope);
        }
        else {
            scope.refresh(this);
        }
        return scope;
    };
    AbstractScope.prototype.createOrReuseEnumScope = function (name, _exported) {
        var scope;
        if (this._enumScopes === undefined) {
            this._enumScopes = new Map();
        }
        else {
            scope = this._enumScopes.get(name);
        }
        if (scope === undefined) {
            scope = new EnumScope(this);
            this._enumScopes.set(name, scope);
        }
        else {
            scope.refresh();
        }
        return scope;
    };
    AbstractScope.prototype._getDestinationScope = function (_blockScoped) {
        return this;
    };
    AbstractScope.prototype._addUseToParent = function (_use) { };
    return AbstractScope;
}());
var RootScope = (function (_super) {
    __extends(RootScope, _super);
    function RootScope() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._exports = undefined;
        return _this;
    }
    RootScope.prototype.markExported = function (_a) {
        var text = _a.text;
        var variable = this._variables.get(text);
        if (variable !== undefined) {
            variable.exported = true;
        }
        else if (this._exports === undefined) {
            this._exports = [text];
        }
        else {
            this._exports.push(text);
        }
    };
    RootScope.prototype.end = function (cb) {
        if (this._exports !== undefined) {
            for (var _i = 0, _a = this._exports; _i < _a.length; _i++) {
                var exported = _a[_i];
                var variable = this._variables.get(exported);
                if (variable !== undefined)
                    variable.exported = true;
            }
        }
        return _super.prototype.end.call(this, cb);
    };
    return RootScope;
}(AbstractScope));
var NonRootScope = (function (_super) {
    __extends(NonRootScope, _super);
    function NonRootScope(_parent) {
        var _this = _super.call(this, false) || this;
        _this._parent = _parent;
        return _this;
    }
    NonRootScope.prototype._addUseToParent = function (use) {
        return this._parent.addUse(use);
    };
    return NonRootScope;
}(AbstractScope));
var EnumScope = (function (_super) {
    __extends(EnumScope, _super);
    function EnumScope() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    EnumScope.prototype.end = function () {
        _super.prototype.end.call(this, function () { });
    };
    EnumScope.prototype.refresh = function () {
        this._uses.length = 0;
    };
    return EnumScope;
}(NonRootScope));
var FunctionScope = (function (_super) {
    __extends(FunctionScope, _super);
    function FunctionScope() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    FunctionScope.prototype.settle = function () {
        var newUses = [];
        for (var _i = 0, _a = this._uses; _i < _a.length; _i++) {
            var use = _a[_i];
            if ((use.domain & 4) !== 0 && (use.domain & 8) === 0) {
                var variable = this._variables.get(use.location.text);
                if (variable !== undefined && variable.domain & use.domain) {
                    variable.uses.push(use);
                }
                else {
                    this._addUseToParent(use);
                }
            }
            else {
                newUses.push(use);
            }
        }
        this._uses = newUses;
    };
    return FunctionScope;
}(NonRootScope));
var FunctionExpressionInnerScope = (function (_super) {
    __extends(FunctionExpressionInnerScope, _super);
    function FunctionExpressionInnerScope() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    FunctionExpressionInnerScope.prototype._addUseToParent = function (use) {
        return this._parent.addUseToParent(use);
    };
    return FunctionExpressionInnerScope;
}(FunctionScope));
var FunctionExpressionScope = (function (_super) {
    __extends(FunctionExpressionScope, _super);
    function FunctionExpressionScope(_name, parent) {
        var _this = _super.call(this, parent) || this;
        _this._name = _name;
        _this._innerScope = new FunctionExpressionInnerScope(_this);
        return _this;
    }
    FunctionExpressionScope.prototype.end = function (cb) {
        this._innerScope.end(cb);
        return cb({
            declarations: [this._name],
            domain: 4,
            exported: false,
            uses: this._uses,
            inGlobalScope: false,
        }, this._name.text);
    };
    FunctionExpressionScope.prototype.settle = function () {
        return this._innerScope.settle();
    };
    FunctionExpressionScope.prototype.addUseToParent = function (use) {
        if (use.domain & 4 && use.location.text === this._name.text) {
            this._uses.push(use);
        }
        else {
            return this._parent.addUse(use);
        }
    };
    FunctionExpressionScope.prototype.addUse = function (use) {
        return this._innerScope.addUse(use);
    };
    FunctionExpressionScope.prototype._getDestinationScope = function () {
        return this._innerScope;
    };
    return FunctionExpressionScope;
}(NonRootScope));
var BlockScope = (function (_super) {
    __extends(BlockScope, _super);
    function BlockScope(_functionScope, parent) {
        var _this = _super.call(this, parent) || this;
        _this._functionScope = _functionScope;
        return _this;
    }
    BlockScope.prototype.getFunctionScope = function () {
        return this._functionScope;
    };
    BlockScope.prototype._getDestinationScope = function (blockScoped) {
        return blockScoped ? this : this._functionScope;
    };
    return BlockScope;
}(NonRootScope));
var NamespaceInnerScope = (function (_super) {
    __extends(NamespaceInnerScope, _super);
    function NamespaceInnerScope() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    NamespaceInnerScope.prototype._addUseToParent = function (use) {
        this._parent.addUseFromInner(use);
    };
    return NamespaceInnerScope;
}(NonRootScope));
var NamespaceScope = (function (_super) {
    __extends(NamespaceScope, _super);
    function NamespaceScope() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._innerScope = new NamespaceInnerScope(_this);
        return _this;
    }
    NamespaceScope.prototype.end = function (cb) {
        var _this = this;
        this._innerScope.end(function (variable, key) {
            if (!variable.exported)
                return cb(variable, key);
            var namespaceVar = _this._variables.get(key);
            if (namespaceVar === undefined) {
                _this._variables.set(key, variable);
            }
            else {
                (_a = namespaceVar.declarations).push.apply(_a, variable.declarations);
                namespaceVar.domain |= variable.domain;
                (_b = namespaceVar.uses).push.apply(_b, variable.uses);
            }
            var _a, _b;
        });
        return _super.prototype.end.call(this, cb);
    };
    NamespaceScope.prototype.createOrReuseNamespaceScope = function (name, exported) {
        if (!exported)
            return this._innerScope.createOrReuseNamespaceScope(name, exported);
        return _super.prototype.createOrReuseNamespaceScope.call(this, name, exported);
    };
    NamespaceScope.prototype.createOrReuseEnumScope = function (name, exported) {
        if (!exported)
            return this._innerScope.createOrReuseEnumScope(name, exported);
        return _super.prototype.createOrReuseEnumScope.call(this, name, exported);
    };
    NamespaceScope.prototype.refresh = function (newParent) {
        this._innerScope = new NamespaceInnerScope(this);
        this._parent = newParent;
        this._uses.length = 0;
    };
    NamespaceScope.prototype.addUse = function (use) {
        return this._innerScope.addUse(use);
    };
    NamespaceScope.prototype.addUseFromInner = function (use) {
        this._uses.push(use);
    };
    NamespaceScope.prototype._getDestinationScope = function () {
        return this._innerScope;
    };
    return NamespaceScope;
}(NonRootScope));
function getEntityNameParent(name) {
    var parent = name.parent;
    while (parent.kind === ts.SyntaxKind.QualifiedName)
        parent = parent.parent;
    return parent;
}
var UsageWalker = (function () {
    function UsageWalker() {
        this._result = new Map();
    }
    UsageWalker.prototype.getUsage = function (sourceFile) {
        var _this = this;
        var variableCallback = function (variable) {
            for (var _i = 0, _a = variable.declarations; _i < _a.length; _i++) {
                var declaration = _a[_i];
                _this._result.set(declaration, variable);
            }
        };
        this._scope = new RootScope(!ts.isExternalModule(sourceFile));
        var cb = function (node) {
            var boundary = util_1.isScopeBoundary(node);
            if (boundary) {
                var savedScope = _this._scope;
                if (boundary === 1) {
                    if (node_1.isFunctionExpression(node) && node.name !== undefined) {
                        _this._scope = new FunctionExpressionScope(node.name, _this._scope);
                    }
                    else if (node_1.isModuleDeclaration(node) && node.name.kind === ts.SyntaxKind.Identifier) {
                        _this._handleNamespace(node);
                        _this._scope = _this._scope.createOrReuseNamespaceScope(node.name.text, isNamespaceExported(node));
                    }
                    else if (node_1.isEnumDeclaration(node)) {
                        _this._handleDeclaration(node, true, 7);
                        _this._scope = _this._scope.createOrReuseEnumScope(node.name.text, util_1.hasModifier(node.modifiers, ts.SyntaxKind.ExportKeyword));
                    }
                    else {
                        if (node_1.isFunctionDeclaration(node) && node.body !== undefined) {
                            _this._handleDeclaration(node, false, 4);
                        }
                        else if (node_1.isClassLikeDeclaration(node)) {
                            _this._handleDeclaration(node, true, 4 | 2);
                        }
                        else if (node_1.isInterfaceDeclaration(node) || node_1.isTypeAliasDeclaration(node)) {
                            _this._handleDeclaration(node, true, 2);
                        }
                        _this._scope = new FunctionScope(_this._scope);
                    }
                }
                else {
                    if (node.kind === ts.SyntaxKind.CatchClause)
                        _this._handleBindingName(node.variableDeclaration.name, true, true);
                    _this._scope = new BlockScope(_this._scope.getFunctionScope(), _this._scope);
                }
                ts.forEachChild(node, cb);
                _this._scope.end(variableCallback);
                _this._scope = savedScope;
                return;
            }
            if (node.kind === ts.SyntaxKind.VariableDeclarationList) {
                _this._handleVariableDeclaration(node);
            }
            else if (node_1.isParameterDeclaration(node)) {
                var parent = node.parent;
                if (util_1.isFunctionWithBody(parent) &&
                    (node.name.kind !== ts.SyntaxKind.Identifier || node.name.originalKeywordKind !== ts.SyntaxKind.ThisKeyword)) {
                    _this._handleBindingName(node.name, false, util_1.isParameterProperty(node));
                    ts.forEachChild(node, cb);
                    return _this._scope.settle();
                }
            }
            else if (node_1.isEnumMember(node)) {
                _this._scope.addVariable(util_1.getPropertyName(node.name), node.name, false, true, 4);
            }
            else if (node_1.isImportClause(node) || node_1.isImportSpecifier(node) || node_1.isNamespaceImport(node) || node_1.isImportEqualsDeclaration(node)) {
                _this._handleDeclaration(node, false, 7);
            }
            else if (node_1.isTypeParameterDeclaration(node)) {
                _this._scope.addVariable(node.name.text, node.name, false, false, 2);
            }
            else if (node_1.isExportSpecifier(node)) {
                return _this._scope.markExported(node.propertyName || node.name);
            }
            else if (node_1.isExportAssignment(node)) {
                if (node_1.isIdentifier(node.expression))
                    return _this._scope.markExported(node.expression);
            }
            else if (node_1.isIdentifier(node)) {
                var domain = getUsageDomain(node);
                if (domain !== undefined)
                    _this._scope.addUse({ domain: domain, location: node });
                return;
            }
            return ts.forEachChild(node, cb);
        };
        ts.forEachChild(sourceFile, cb);
        this._scope.end(variableCallback);
        return this._result;
    };
    UsageWalker.prototype._handleNamespace = function (node) {
        this._scope.addVariable(node.name.text, node.name, false, isNamespaceExported(node), 1);
    };
    UsageWalker.prototype._handleDeclaration = function (node, blockScoped, domain) {
        if (node.name !== undefined)
            this._scope.addVariable(node.name.text, node.name, blockScoped, util_1.hasModifier(node.modifiers, ts.SyntaxKind.ExportKeyword), domain);
    };
    UsageWalker.prototype._handleBindingName = function (name, blockScoped, exported) {
        var _this = this;
        if (name.kind === ts.SyntaxKind.Identifier) {
            this._scope.addVariable(name.text, name, blockScoped, exported, 4);
        }
        else {
            util_1.forEachDestructuringIdentifier(name, function (declaration) {
                _this._scope.addVariable(declaration.name.text, declaration.name, blockScoped, exported, 4);
            });
        }
    };
    UsageWalker.prototype._handleVariableDeclaration = function (declarationList) {
        var blockScoped = util_1.isBlockScopedVariableDeclarationList(declarationList);
        var exported = declarationList.parent.kind === ts.SyntaxKind.VariableStatement &&
            util_1.hasModifier(declarationList.parent.modifiers, ts.SyntaxKind.ExportKeyword);
        for (var _i = 0, _a = declarationList.declarations; _i < _a.length; _i++) {
            var declaration = _a[_i];
            this._handleBindingName(declaration.name, blockScoped, exported);
        }
    };
    return UsageWalker;
}());
function isNamespaceExported(node) {
    return node.parent.kind === ts.SyntaxKind.ModuleDeclaration || util_1.hasModifier(node.modifiers, ts.SyntaxKind.ExportKeyword);
}
//# sourceMappingURL=data:application/json;base64,